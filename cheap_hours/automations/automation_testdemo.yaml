#####################################################################################
#
# These five automations can control multiple devices - with the same scenario
# If your heatpump and your electric car needs different scenarios, then you
# need to create five unique automations and also unique input numbers etc.
#
# sensor.load_car_between_hours
# input_number.highest_allowed_car_price
# input_number.load_car_nr_hours
# input_number.start_load_car
# input_number.stop_load_car
# input_number.load_car_nr_hours_rem
# input_boolean.charge_car_only_today
# For testing: input_boolean.car_test
#
# These automations triggers when state goes from False to True and the opposite
# If your condition hinders the automation to run, then you might want to add triggers
# You might want to listen every 10 minutes or each hour.
# The condition checks if our sensor still is True
#
# You also want the automation to listen for when you change highest allowed price etc.
# Play with it
#
# Make sure that you change the sensors id:s to the ones that you have
# sensor.nordpool_x_x_x_x_x_x
# sensor.your_current
#
########################################################################################

- id: demo_on
  alias: Demo on
  trigger:
    - platform: state
      entity_id: sensor.load_demo_between_hours
      from: 'False'
      to: 'True'
#    - platform: time_pattern
#      minutes: "/10"
#    - platform: time_pattern
#      minutes: "00"
    - platform: state
      entity_id: input_number.highest_allowed_demo_price
    - platform: state
      entity_id: sensor.nordpool_kwh_se3_sek_3_10_0
  condition:
    condition: and
    conditions:
# Ex: if current is under 10A - than ok to turn on 
#      - condition: numeric_state
#        entity_id: sensor.current_phase_1
#        below: 10
      - condition: numeric_state
        entity_id: sensor.nordpool_kwh_se3_sek_3_10_0
        below: input_number.highest_allowed_demo_price
      - condition: numeric_state
        entity_id: input_number.highest_allowed_demo_price
        above: sensor.nordpool_kwh_se3_sek_3_10_0        
      - condition: state
        entity_id: sensor.load_demo_between_hours
        state: 'True'
  action:
    - service: input_boolean.turn_on
      target:
        entity_id: input_boolean.demo


           
- id: demo_off
  alias: Demo off
  trigger:
    - platform: state
      entity_id: sensor.load_demo_between_hours
      from: 'True'
      to: 'False'
    - platform: numeric_state
      entity_id: input_number.highest_allowed_demo_price
      below: sensor.nordpool_kwh_se3_sek_3_10_0
    - platform: numeric_state
      entity_id: sensor.nordpool_kwh_se3_sek_3_10_0
      above: input_number.highest_allowed_demo_price
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: sensor.load_demo_between_hours
        state: "False"
# Ex: if your heater is warm enough - than ok to turn off
#      - condition: numeric_state
#        entity_id: sensor.your_heater
#        above: 45
  action:
    - service: input_boolean.turn_off
      target:
        entity_id: input_boolean.demo
    
       
        
- id: adjust_rem_demo_hours
  alias: Adjust rem demo hours
  trigger:
    - platform: time_pattern
      hours: '*'
      minutes: '59'
      seconds: '50'
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: input_boolean.charge_demo_only_today
        state: 'off'
      - condition: state
        entity_id:  sensor.load_demo_between_hours
        state: 'True'
      - condition: time
        after: "14:00:00"
  action:
    - service: input_number.set_value
      data_template:
        entity_id: input_number.load_demo_nr_hours_rem
        value: "{{ states('input_number.load_demo_nr_hours_rem') | float(0) - 1 }}"
       
        
- id: adjust_rem_demo_hours_2
  alias: Adjust rem demo hours 2
  trigger:
    - platform: state
      entity_id: input_number.load_demo_nr_hours
  action:
    - service: input_number.set_value
      data_template:
        entity_id: input_number.load_demo_nr_hours_rem
        value: "{{ states('input_number.load_demo_nr_hours')|float(0) }}"
        
        
- id: demohour_reset
  alias: Demohour reset
  trigger:
    - platform: time
      at: '13:00:00'
  action:
    - service: input_number.set_value
      data_template:
        entity_id: input_number.load_demo_nr_hours_rem
        value: "{{ states('input_number.load_demo_nr_hours')|float(0) }}"